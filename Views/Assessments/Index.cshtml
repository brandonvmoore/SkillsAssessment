@using SkillsAssessment.Models
@model AssessmentModel

<style>
    /*    Tried moving this to site.css but it didn't work right so I will have to investigate */
    #skillList .number-circle {
        border-radius: 50%;
        width: 28px;
        height: 28px;
        padding: 8px;
        margin: 2px;
        background: #fff;
        border: 2px solid #666;
        border-color: lightgrey;
        text-align: center;
        line-height: 7px;
    }


    #competencyList i.eye-toggle {
        line-height: 150%; /* Center eye icons with text. */
    }

    #skillList div.row {
        align-items: center;
    }
</style>

<partial name="modal" />

<div class="row">
    <div class="col-lg-12 text-center h2">@Model.Title</div>
</div>

<div class="row">
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 w-100">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul id="categoryList" class="navbar-nav flex-grow-1">
                <li class="nav-item border-right"><a href="#" class="nav-link text-dark">Intro Page</a></li>
                <li class="divider"></li>

                @foreach (var c in Model.Categories)
                {
                    <li class="nav-item" data-id="@c.Id" data-quote="@c.Quote"><a href="#" class="nav-link text-dark">@c.Title</a></li>
                }
            </ul>
        </div>
    </nav>
</div>

<div class="row">
    <div class="col-lg-2 pr-lg-0 pl-0 border-right">
        <div class="text-center">
            <a id="addCompetencyLink"
               href="javascript:void(0);"
               type="button" style="font-size:smaller; width:96% !important;"
               @*data-target="#exampleModal" data-toggle="modal"*@
               class="d-block border shadow py-2 mb-2 text-center mx-auto text-decoration-none">+ New Core Competency</a>
        </div>
        <ul id="competencyList" class="list-group list-group-flush small"></ul>
    </div>
    <div class="col-lg-10 border">
        <div class="row my-lg-3">
            <div class="col text-center"><span id="categoryHeading">Leadership</span> / <span id="competencyHeading">Impact</span></div>
        </div>

        <div class="row my-lg-3">
            <div class="col-lg-12">
                <label for="skillQuestion">Question</label>
                <input type="text" class="form-control" id="skillQuestion">
            </div>
        </div>

        <div class="row my-lg-3">
            <div class="col">
                <span>Skills</span>
            </div>
        </div>

        <div class="row card border-left-0 border-right-0 border-dark">
            <div class="col p-lg-0">
                <ul id="skillList" class="list-group-flush p-lg-0"></ul>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        class AssessmentModel {
            constructor() {
                this.CategoryHeading = $("#categoryHeading");
                this.CompetencyHeading = $("#competencyHeading");
                this.CategoryList = $("#categoryList");
                this.CompetencyList = $("#competencyList");
                this.SkillList = $('#skillList');
                this.Question = $('#skillQuestion');



                this.ActiveCategory = () => $("li.active", this.CategoryList);
                this.ActiveCompetency = () => $("li.active", this.CompetencyList);
                this.ActiveCategoryId = () => this.ActiveCategory().attr("data-id");
                this.ActiveCompetencyId = () => this.ActiveCompetency().attr("data-id");
                this.ActiveCompetencyQuestion = () => this.ActiveCompetency().attr("data-question");



                this.Urls = {
                    CompetenciesListPartial: '@Url.Action("CompetenciesListPartial", "Assessments")',
                    SkillsListPartial: '@Url.Action("SkillsListPartial", "Assessments")'
                };

                this.SetActiveCategory();

                // attach CategoryList click handler
                $("li[data-id]", this.CategoryList).click(this.onCategoryClicked);

                // popup modal to enter new core competency
                $("#addCompetencyLink").click(() => $('#exampleModal').modal("toggle"));

                this.Question.blur(this.onQuestionUpdated);
            }

            UpdateQuestion() {
                var x = this.Question.val();

                if (this.Question.data('originalValue') == this.Question.val())
                    return;

                ajax({
                    url: "@Url.Action("UpdateSkillQuestion","Assessments")",
                    data: {
                        categoryId: am.ActiveCategoryId,
                        competencyId: am.ActiveCompetencyId,
                        newQuestion: this.Question.val()
                    },
                    success: (data) => {
                        this.ActiveCompetency.attr("data-question", this.Question.val());
                    },
                    type: "POST",
                    error: function (a, b, c) {
                        debugger;
                    }
                });
            }

            RefreshCompetencies() {
                showPartialView({
                    url: this.Urls.CompetenciesListPartial,
                        data: { assessmentId: 1, categoryId: this.ActiveCategoryId() },
                    target: this.CompetencyList,
                    success: () => {
                        this.SetActiveCompetency();

                        //attach CompetencyList click handler
                        $("li[data-id]", this.CompetencyList).click(this.onCompetencyClicked);

                        // Wire up eye icon events
                        $("i.eye-toggle", this.CompetencyList).click((ev) => {
                            event.stopPropagation(); // don't bubble up to select competency
                            $(ev.target).toggleClass("fa-eye fa-eye-slash");
                        });

                        this.RefreshSkills();
                    }
                });
            }

            RefreshSkills() {
                showPartialView({
                    url: this.Urls.SkillsListPartial,
                    data: { assessmentId: 1, categoryId: this.ActiveCategoryId(), competencyId: this.ActiveCompetencyId() },
                    target: this.SkillList,
                    success: () => {
                        $("i.eye-toggle", this.SkillList).click((ev) => {
                            $(ev.target).toggleClass("fa-eye fa-eye-slash");
                        });

                        // add handler for creating new skills
                        $('#addSkillLink').click(function () {
                            ajax({
                                url: "@Url.Action("AddSkill","Assessments")",
                                // Update add data-categoryId to li for competency and use that instead of am.ActiveCategoryId
                                data: {
                                    categoryId: am.ActiveCategoryId,
                                    competencyId: am.ActiveCompetencyId,
                                    skillText: $("#newSkillNameInput").val()
                                },
                                //success: (data) => {

                                //},
                                type: "POST",
                                error: function (a, b, c) {
                                    debugger;
                                }
                            });
                        });
                    }
                });
            }

            SetActiveCategory(id) {
                var selector = id > 0 ? `li[data-id="${id}"]` : "li[data-id]:first";
                $('li[data-id]', this.CategoryList).removeClass("active");
                $(selector, this.CategoryList).addClass("active");
                this.CategoryHeading.text(this.ActiveCategory().text());
                this.RefreshCompetencies();
            }

            // Pass in a competencyId to select, or omit parameter to select 1st one
            SetActiveCompetency(id) {
                $('li[data-id]', this.CompetencyList).removeClass("active");

                var selector = id > 0 ? `li[data-id="${id}"]` : "li:first";
                $(selector, this.CompetencyList).addClass("active");

                this.CompetencyHeading.text(this.ActiveCompetency().text());
                this.RefreshQuestion();
                this.RefreshSkills();
            }

            RefreshQuestion() {
                this.Question.val(this.ActiveCompetencyQuestion());
            }

            onQuestionUpdated = (ev) => {
                this.UpdateQuestion();
            }


            onCategoryClicked = (ev) => {
                this.SetActiveCategory($(ev.currentTarget).attr('data-id'));
            }

            onCompetencyClicked = (ev) => {
                this.SetActiveCompetency($(ev.currentTarget).attr('data-id'));
            }


        }

        var am = new AssessmentModel();
    </script>
}